#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) Red Hat, Inc
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


from dci_analytics import elasticsearch as es
from dci_analytics.synchronizers import jobs

from kombu import Connection, Exchange, Queue
from kombu.mixins import ConsumerMixin

import os

_INDEX = "jobs"

amqp_broker_url = os.getenv("AMQP_BROKER_URL", "amqp://guest:guest@rabbitmq:5672//")


class Worker(ConsumerMixin):
    def __init__(self, connection, queues):
        self.connection = connection
        self.queues = queues

    def get_consumers(self, Consumer, channel):
        return [Consumer(queues=self.queues,
                         callbacks=[self.on_message])]

    def on_message(self, body, message):
        event = body["event"]
        job = body["job"]
        print("Handle job event %s: job_id %s" % (event, job["id"]), flush=True)

        latest_index_alias = es.get_latest_index_alias(_INDEX)
        print(f"latest_index_alias: {latest_index_alias}", flush=True)
        if latest_index_alias:
             jobs.sync_one_job(latest_index_alias, body["job"])
        else:
             new_index_name = es.generate_new_index_name(_INDEX)
             print(f"new index created: '{new_index_name}'", flush=True)
             jobs.sync_one_job(new_index_name, body["job"])
             new_alias = es.add_alias_to_index("jobs", new_index_name)
             print(f"new alias '{new_alias}' added for index: '{new_index_name}'", flush=True)
        message.ack()


if __name__ == '__main__':

    exchange_name = "dci.analytics.exchange"
    exchange_type = "direct"
    queue_name = "dci.analytics.queue"
    routing_key = "dci.analytics.jobs"

    exchange = Exchange(exchange_name, type=exchange_type)
    queues = [Queue(queue_name, exchange, routing_key=routing_key)]

    print("worker waiting for messages\n")
    print("exchange: {exchange_name}, type: {exchange_type}\n")
    print("queue: {queue_name}, routing_key: {routing_key}\n")

    with Connection(amqp_broker_url, heartbeat=4) as conn:
            worker = Worker(conn, queues)
            worker.run()
